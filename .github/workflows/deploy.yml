name: deploy

on:
  push:
    branches: [main]          # only prod deploys go via main

permissions:
  id-token: write             # needed for OIDC → AWS STS
  contents: read

env:
  VITE_API_URL: https://api.artefactcontext.com
  AWS_REGION: eu-west-2       # default; can still override via secret
  SPA_BUCKET: ${{ secrets.SPA_BUCKET }}
  CF_DIST_ID: ${{ secrets.CF_DIST_ID }}   # ← NEW
  ECR_REPO:   ${{ secrets.ECR_REPO }}
  CLUSTER:    ${{ secrets.CLUSTER }}
  RUNNER_SERVICE:  ${{ secrets.RUNNER_SERVICE }}
  WORKER_SERVICE:  ${{ secrets.WORKER_SERVICE }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # ----- AWS creds via OIDC -----
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      # ----- Front-end -----
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: viewer/package-lock.json

      - name: Build viewer
        working-directory: viewer
        run: |
          npm ci
          npm run build

      - name: Upload SPA to S3
        run: |
          aws s3 sync viewer/dist "s3://${SPA_BUCKET}" --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CF_DIST_ID" \
            --paths "/*"

      # ----- Back-end image -----
      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
            | docker login --username AWS --password-stdin $ECR_REPO

      - name: Build & push image
        run: |
          docker build -t $ECR_REPO:${{ github.sha }} \
                       -t $ECR_REPO:latest \
                       -f hc_services/runner/Dockerfile .
          docker push --all-tags $ECR_REPO

      # ----- ECS rollout -----
      - name: Update ECS services
        run: |
          for svc in "$RUNNER_SERVICE" "$WORKER_SERVICE"; do
            aws ecs update-service \
              --cluster "$CLUSTER" \
              --service "$svc" \
              --force-new-deployment
          done
